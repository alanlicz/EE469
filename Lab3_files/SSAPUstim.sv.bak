// Test bench for Register file
`timescale 1ns/10ps

module SSAPUstim(); 		

	parameter ClockDelay = 50000;

	logic clk, reset;

	integer i;

	SSCPU dut (.clk, .reset);

	// Force %t's to print in a nice format.
	initial $timeformat(-9, 2, " ns", 10);

	initial begin // Set up the clock
		clk <= 0;
		forever #(ClockDelay/2) clk <= ~clk;
	end

	initial begin
		reset <=1; @(posedge CLOCK_50);
		reset <=0; @(posedge CLOCK_50);



		$stop;
	end
endmodule


module DE1_SoC_testbench();
	logic CLOCK_50; 
	logic [6:0] HEX0, HEX1, HEX2, HEX3, HEX4, HEX5; 
	logic [9:0] LEDR; 
	logic [3:0] KEY;
	logic [9:0] SW; 
	
	DE1_SoC dut (CLOCK_50, HEX0, HEX1, HEX2, HEX3, HEX4, HEX5, KEY, LEDR, SW);
	
	// Set up a simulated clock.
	parameter CLOCK_PERIOD=100;
	initial begin
		CLOCK_50 <= 0;
		forever #(CLOCK_PERIOD/2) CLOCK_50 <= ~CLOCK_50; // Forever toggle the clock
	end
	
	// Test the design.
	initial begin
														@(posedge CLOCK_50);
		KEY[0] <= 0; 								@(posedge CLOCK_50); // Always reset FSMs at start
		KEY[0] <= 1; SW[0] <= 0; SW[1] <=0; @(posedge CLOCK_50);
														@(posedge CLOCK_50);
														@(posedge CLOCK_50);
														@(posedge CLOCK_50);
		            SW[0] <= 1;          	@(posedge CLOCK_50);
														@(posedge CLOCK_50);
														@(posedge CLOCK_50);
														@(posedge CLOCK_50);
		            SW[0] <= 0; SW[1] <=1; 	@(posedge CLOCK_50);
														@(posedge CLOCK_50);
														@(posedge CLOCK_50);
														@(posedge CLOCK_50);
		$stop; // End the simulation.
	end
endmodule